/**
 * Grill mobile app
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.example.lr2.apiclient.apis

import com.example.lr2.apiclient.infrastructure.ApiClient
import com.example.lr2.apiclient.infrastructure.ClientError
import com.example.lr2.apiclient.infrastructure.ClientException
import com.example.lr2.apiclient.infrastructure.MultiValueMap
import com.example.lr2.apiclient.infrastructure.RequestConfig
import com.example.lr2.apiclient.infrastructure.RequestMethod
import com.example.lr2.apiclient.infrastructure.ResponseType
import com.example.lr2.apiclient.infrastructure.ServerError
import com.example.lr2.apiclient.infrastructure.ServerException
import com.example.lr2.apiclient.infrastructure.Success
import com.example.lr2.apiclient.models.AdditionModel
import com.example.lr2.apiclient.models.DishCategoryDataModel
import com.example.lr2.apiclient.models.DishDataModel

class DishApi(basePath: kotlin.String = "http://10.0.2.2:8080") : ApiClient(basePath) {

    /**
     * get dish
     * 
     * @param idDish  
     * @return DishDataModel
     */
    @Suppress("UNCHECKED_CAST")
    fun getDish(idDish: kotlin.Int): DishDataModel {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("idDish", listOf(idDish.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/dish", query = localVariableQuery
        )
        val response = request<DishDataModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DishDataModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get dish addition
     * 
     * @param idDish  
     * @return kotlin.Array<AdditionModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun getDishAddition(idDish: kotlin.Int): kotlin.Array<AdditionModel> {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("idDish", listOf(idDish.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/dish/additions", query = localVariableQuery
        )
        val response = request<kotlin.Array<AdditionModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<AdditionModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get dish categories
     * 
     * @return kotlin.Array<DishCategoryDataModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun getDishCategories(): kotlin.Array<DishCategoryDataModel> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/dish/categories"
        )
        val response = request<kotlin.Array<DishCategoryDataModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DishCategoryDataModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get dishes
     * 
     * @param idCategory  
     * @return kotlin.Array<DishDataModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun getDishes(idCategory: kotlin.Int): kotlin.Array<DishDataModel> {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("idCategory", listOf(idCategory.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/dishes", query = localVariableQuery
        )
        val response = request<kotlin.Array<DishDataModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<DishDataModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
