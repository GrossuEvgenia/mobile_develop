/**
 * Grill mobile app
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.example.lr2.apiclient.apis

import com.example.lr2.apiclient.infrastructure.ApiClient
import com.example.lr2.apiclient.infrastructure.ClientError
import com.example.lr2.apiclient.infrastructure.ClientException
import com.example.lr2.apiclient.infrastructure.MultiValueMap
import com.example.lr2.apiclient.infrastructure.RequestConfig
import com.example.lr2.apiclient.infrastructure.RequestMethod
import com.example.lr2.apiclient.infrastructure.ResponseType
import com.example.lr2.apiclient.infrastructure.ServerError
import com.example.lr2.apiclient.infrastructure.ServerException
import com.example.lr2.apiclient.infrastructure.Success
import com.example.lr2.apiclient.models.AddressDataModel
import com.example.lr2.apiclient.models.PersonDataModel

class UserApi(basePath: kotlin.String = "http://10.0.2.2:8080") : ApiClient(basePath) {

    /**
     * get user address
     * 
     * @param id  
     * @return AddressDataModel
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserAddress(id: kotlin.Int): AddressDataModel {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("id", listOf(id.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user/address", query = localVariableQuery
        )
        val response = request<AddressDataModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AddressDataModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get user data
     * 
     * @param id  
     * @return PersonDataModel
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserData(id: kotlin.Int): PersonDataModel {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("id", listOf(id.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user", query = localVariableQuery
        )
        val response = request<PersonDataModel>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PersonDataModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Save user address
     * 
     * @param body  
     * @return AddressDataModel
     */
    @Suppress("UNCHECKED_CAST")
    fun saveUserAddress(body: AddressDataModel): AddressDataModel {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user/address"
        )
        val response = request<AddressDataModel>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AddressDataModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Save user data
     * 
     * @param body  
     * @return PersonDataModel
     */
    @Suppress("UNCHECKED_CAST")
    fun saveUserData(body: PersonDataModel): PersonDataModel {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user"
        )
        val response = request<PersonDataModel>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PersonDataModel
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
